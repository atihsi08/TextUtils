{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","toggles","document","getElementsByName","toggling","event","forEach","toggle","id","target","checked","mode","toggleMode","className","style","color","href","title","type","placeholder","name","onClick","htmlFor","TextForm","useState","text","setText","heading","rows","background","value","onChange","toLocaleUpperCase","toLocaleLowerCase","wordArr","split","i","length","charAt","toUpperCase","substring","str","join","filter","n","toFixed","defaultProps","aboutText","Alert","alert","role","textTransform","msg","App","setMode","setAlert","showAlert","message","setTimeout","modeColor","body","backgroundColor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8f90455e.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\r\n\r\nexport function Navbar(props) {\r\n  // const dark = props.dark ? \"dark\" : \"light\";\r\n\r\n  let toggles = document.getElementsByName('toggle');\r\n  const toggling = (event) => {\r\n\r\n    toggles.forEach((toggle) => {\r\n      if (toggle.id !== event.target.id) {\r\n        toggle.checked = false;\r\n      }\r\n      else if (props.mode !== event.target.id && event.target.checked) {\r\n        props.toggleMode(event.target.id);\r\n      }\r\n      else {\r\n        props.toggleMode(\"light\");\r\n      }\r\n    })\r\n\r\n    \r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode === \"light\" ? \"light\" : \"dark\"} bg-${props.mode === \"light\" ? \"light\" : \"dark\"}`}\r\n    >\r\n      <div className=\"container-fluid\" >\r\n        <a className=\"navbar-brand\" style={{ color: props.mode === \"light\" ? \"black\" : props.mode === \"dark\" ? \"white\" : props.mode }} href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" style={{ color: props.mode === \"light\" ? \"black\" : props.mode === \"dark\" ? \"white\" : props.mode }} aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div className=\"form-check form-switch mx-3\" >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"dark\"\r\n              name=\"toggle\"\r\n              onClick={toggling}\r\n            />\r\n            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlFor=\"flexSwitchCheckDefault\" style={{ \"fontWeight\": \"bold\" }}>\r\n              {props.mode === 'dark' ? \"Light Mode\" : \"Dark Mode\"}\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"form-check form-switch mx-3\" >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"purple\"\r\n              name=\"toggle\"\r\n              onClick={toggling}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{ color: \"purple\", \"fontWeight\": \"bold\" }}>\r\n              {props.mode === 'purple' ? \"Light Mode\" : \"Purple Mode\"}\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"form-check form-switch mx-3\" >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"orange\"\r\n              name=\"toggle\"\r\n              onClick={toggling}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{ color: \"orange\", \"fontWeight\": \"bold\" }}>\r\n              {props.mode === 'orange' ? \"Light Mode\" : \"Orange Mode\"}\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"form-check form-switch mx-3\" >\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              id=\"pink\"\r\n              name=\"toggle\"\r\n              onClick={toggling}\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{ color: \"pink\", \"fontWeight\": \"bold\" }}>\r\n              {props.mode === 'pink' ? \"Light Mode\" : \"Pink Mode\"}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Text Utils\",\r\n  aboutText: \"About\",\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport function TextForm(props) {\r\n\r\n  const mode = props.mode === \"light\" ? \"dark\" : \"light\";\r\n\r\n  const handleUpClick = () => {\r\n    setText(text.toLocaleUpperCase());\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    setText(text.toLocaleLowerCase());\r\n  };\r\n\r\n  const handleCapClick = () => {\r\n    let wordArr = text.toLocaleLowerCase().split(\" \");\r\n    for (let i = 0; i < wordArr.length; i++) {\r\n      wordArr[i] = wordArr[i].charAt(0).toUpperCase() + wordArr[i].substring(1);\r\n    }\r\n    let str = wordArr.join(\" \");\r\n    setText(str);\r\n  }\r\n\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n  }\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className={`container my-3 text-${mode}`}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3 \">\r\n          <textarea\r\n            className={`form-control text-${mode}`}\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"12\"\r\n            style={{background:props.mode === \"light\"?\"white\":props.mode===\"dark\" ? \"#36454F\" : props.mode, \"borderSize\":\"10px\"}}\r\n            value={text}\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button className={`btn btn-${mode} mx-2`} onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className={`btn btn-${mode} mx-2`} onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className={`btn btn-${mode} mx-2`} onClick={handleCapClick}>\r\n          Capitalize First Word\r\n        </button>\r\n        <button className={`btn btn-${mode} mx-2`} onClick={handleClear}>\r\n          Clear\r\n        </button>\r\n      </div>\r\n      <div className={`container my-3 text-${mode}`}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>{text.split(' ').filter(function(n){return n !== \"\"}).length} words and {text.length} characters</p>\r\n        <p>{(0.008 * (text.split(\" \").length - 1)).toFixed(3)} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0 ? text : \"Enter something in above textbox to preview it here...\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n            <strong style={{textTransform: 'capitalize'}}>{props.alert.type}:</strong> {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { TextForm } from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = (modeColor) => {\n    let color = \"\";\n    if (mode !== modeColor && modeColor !== \"light\") {\n      // setMode(\"dark\");\n      setMode(modeColor);\n      switch (modeColor) {\n        case \"dark\": color = \"#36454F\";\n          break;\n        case \"purple\": color = \"#BF00FF\";\n          break;\n        case \"orange\": color = \"#FF6700\";\n          break;\n        case \"pink\": color = \"#FF10F0\";\n          break;\n        default: color = \"#36454F\";\n      }\n      document.body.style.backgroundColor = color;\n      showAlert(\"Dark mode has been enabled.\", \"success\");\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled.\", \"success\");\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <TextForm heading=\"Enter the text to analyze below\" mode={mode} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}